name: CICD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  diff:
    runs-on: ubuntu-latest
    outputs:
      golang: ${{ steps.filter.outputs.golang }}
      js: ${{ steps.filter.outputs.js }}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: 'main'
          filters: |
            golang:
              - "api-server/**"
              - "common/**"
              - "schemas/**"
            js:
              - "dashboard/**"

  build-ui-builder:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            dependencies:
              - dashboard/yarn.lock

      - name: Build dashboard builder image
        run: make build-ui-builder-image
        if: steps.changes.outputs.dependencies == 'true'

  eslint:
    runs-on: ubuntu-latest

    needs:
      - build-ui-builder
      - diff

    if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.js == 'true') || github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: eslint
        run: make docker-eslint

  golint:
    runs-on: ubuntu-latest

    needs:
      - diff

    # if: ${{ (github.event_name == 'pull_request' && needs.diff.outputs.golang == 'true') || github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.44

  build-dashboard:
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    needs:
      - eslint

    steps:
      - uses: actions/checkout@v2

      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: Build dashboard
        run: make docker-build-ui

      - name: Set git sha_short outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git describe --match=NeVeRmAtCh --tags --always --dirty | cut -c 1-7)"

      - name: Upload dashboard artifacts
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ap-northeast-1
          source: './dashboard/build/'
          dest: 's3://yatai-github-artifacts/dashboard-artifacts/${{ steps.vars.outputs.sha_short }}'
          flags: --recursive

  build-api-server:
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    needs:
      - golint

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build api-server
        run: make docker-build-api-server
        env:
          GOMOD_CACHE: ~/go/pkg/mod

      - name: Set git sha_short outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git describe --match=NeVeRmAtCh --tags --always --dirty | cut -c 1-7)"

      - name: Upload api-server artifacts
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ap-northeast-1
          source: './bin/'
          dest: 's3://yatai-github-artifacts/api-server-artifacts/${{ steps.vars.outputs.sha_short }}'
          flags: --recursive

  build-image:
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    needs:
      - build-dashboard
      - build-api-server

    steps:
      - uses: actions/checkout@v2

      - name: Login to Quay.io
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}

      - name: Set git sha_short outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git describe --match=NeVeRmAtCh --tags --always --dirty | cut -c 1-7)"

      - name: Download dashboard artifacts
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ap-northeast-1
          dest: './dashboard/build/'
          source: 's3://yatai-github-artifacts/dashboard-artifacts/${{ steps.vars.outputs.sha_short }}'
          flags: --recursive

      - name: Download api-server artifacts
        uses: prewk/s3-cp-action@v2
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: ap-northeast-1
          dest: './bin/'
          source: 's3://yatai-github-artifacts/api-server-artifacts/${{ steps.vars.outputs.sha_short }}'
          flags: --recursive

      - name: Build yatai image
        run: make build-image

  deploy:
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/main'

    needs:
      - build-image

    steps:
      - uses: actions/checkout@v2

      - uses: Azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Set git sha_short outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git describe --match=NeVeRmAtCh --tags --always --dirty | cut -c 1-7)"

      - uses: Azure/k8s-deploy@v1.4
        with:
          namespace: yatai-system
          manifests: |
            scripts/manifests/deployment.yml
          images: |
            quay.io/bentoml/yatai:${{ steps.vars.outputs.sha_short }}

concurrency:
  group: yatai${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
